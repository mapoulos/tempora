service: tempora-golang
frameworkVersion: "2"
custom:
    publicAudioUrl: tempora-audio-${opt:stage, self:provider.stage, "dev"}.equul.us
provider:
  name: aws
  runtime: go1.x


  httpApi:
    cors: true
    authorizers:
      serviceAuthorizer:
        identitySource: $request.header.Authorization
        issuerUrl: https://equulus.us.auth0.com/
        audience:
          - "a45HOOQ5VyDf2mf4V0oC5hXXClfjR1P1"
          - "https://1sctves1d1.execute-api.us-east-1.amazonaws.com"

# you can overwrite defaults here
  stage: dev
#  region: us-east-1

  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "dynamodb:*"
      Resource:
        - !GetAtt DynamoTable.Arn
        - !Sub "${DynamoTable.Arn}/index/gs1"
        - !Sub "${DynamoTable.Arn}/index/gs2"
        - !Sub "${DynamoTable.Arn}/index/gs3"
    - Effect: "Allow"
      Action:
        - "s3:*"
      Resource:
        - !Sub "${AudioBucket.Arn}"
        - !Sub "${AudioBucket.Arn}/*"

package:
  exclude:
    - ./**
  include:
    - ./bin/**

functions:
  meditation:
    handler: bin/meditation
    environment:
      DDB_TABLE: !Ref DynamoTable
      AUDIO_BUCKET: !Ref AudioBucket
      PUBLIC_AUDIO_BASE: ${self:custom.publicAudioUrl}
      CLOUDFRONT_DISTRIBUTION_ID: !Ref AudioDistribution
    events:
      - httpApi:
          path: /meditations
          method: get
          authorizer: serviceAuthorizer
      - httpApi:
          path: /meditations/{meditationId}
          method: get
          authorizer: serviceAuthorizer
      - httpApi:
          path: /meditations
          method: post
          authorizer: serviceAuthorizer
      - httpApi:
          path: /meditations/{meditationId}
          method: put
          authorizer: serviceAuthorizer
      - httpApi:
          path: /meditations/{meditationId}
          method: patch
          authorizer: serviceAuthorizer
      - httpApi:
          path: /meditations/{meditationId}
          method: delete
          authorizer: serviceAuthorizer
      - httpApi:
          path: /public/meditations
          method: get
      - httpApi:
          path: /upload-url
          method: get
          authorizer: serviceAuthorizer
      - httpApi:
          path: /sequences
          method: get
          authorizer: serviceAuthorizer
      - httpApi:
          path: /sequences/{sequenceId}
          method: get
          authorizer: serviceAuthorizer
      - httpApi:
          path: /sequences/{sequenceId}
          method: patch
          authorizer: serviceAuthorizer
      - httpApi:
          path: /sequences/{sequenceId}
          method: put
          authorizer: serviceAuthorizer
      - httpApi:
          path: /sequences
          method: post
          authorizer: serviceAuthorizer
      - httpApi:
          path: /public/sequences
          method: get
      - httpApi:
          path: /public/sequences/{sequenceId}
          method: get

# you can add CloudFormation resource templates here
resources:
  Resources:
    DynamoTable:
      Type: AWS::DynamoDB::Table
      DeletionPolicy: Retain
      Properties:
        TableName: tempora-${opt:stage, self:provider.stage, "dev"}
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: "pk"
            AttributeType: "S"
          - AttributeName: "sk"
            AttributeType: "S"
          - AttributeName: "ppk" # get meditation by id
            AttributeType: "S"
          - AttributeName: "pppk" # public meditations
            AttributeType: "S"
        KeySchema:
          - AttributeName: "pk"
            KeyType: "HASH"
          - AttributeName: "sk"
            KeyType: "RANGE"
        GlobalSecondaryIndexes:
          - IndexName: "gs1" # reverse lookups
            Projection:
              ProjectionType: ALL
            KeySchema:
              - AttributeName: "sk"
                KeyType: "HASH"
              - AttributeName: "pk"
                KeyType: "RANGE"
          - IndexName: "gs2" # searching by UserId
            Projection:
              ProjectionType: ALL
            KeySchema:
              - AttributeName: "ppk"
                KeyType: "HASH"
              - AttributeName: "sk"
                KeyType: "RANGE"
          - IndexName: "gs3" # For listing public meditations
            Projection:
              ProjectionType: ALL
            KeySchema:
              - AttributeName: "pppk"
                KeyType: "HASH"
              - AttributeName: "sk"
                KeyType: "RANGE"

    AudioBucket:
      Type: AWS::S3::Bucket
      DeletionPolicy: Retain
      Properties:
        BucketName: equulus-tempora-${opt:stage, self:provider.stage, "dev"}
        CorsConfiguration:
          CorsRules:
            - AllowedHeaders:
                - '*'
              AllowedMethods:
                - GET
                - PUT
                - POST
              AllowedOrigins:
                - '*'
              ExposedHeaders:
                - Connection
                - Server
                - Date
              MaxAge: '3600'
              Id: corsRule1

        LifecycleConfiguration:
          Rules:
            - ExpirationInDays: 1
              Prefix: "upload/"
              Status: Enabled

    AudioBucketReadPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket: !Ref AudioBucket
        PolicyDocument:
          Statement:
          - Action: 's3:GetObject'
            Effect: Allow
            Resource: !Sub 'arn:aws:s3:::${AudioBucket}/public/*'
            Principal:
              CanonicalUser: !GetAtt CloudFrontOriginAccessIdentity.S3CanonicalUserId

    CloudFrontOriginAccessIdentity:
      Type: 'AWS::CloudFront::CloudFrontOriginAccessIdentity'
      Properties:
        CloudFrontOriginAccessIdentityConfig:
          Comment: Identity for Blog S3 Bucket access from CloudFront

    AudioDistribution:
      Type: AWS::CloudFront::Distribution
      Properties:
        DistributionConfig:
          Comment: CDN for audioDistribution
          DefaultCacheBehavior:
            TargetOriginId: audioOrigin
            ForwardedValues:
              QueryString: 'true'
            ViewerProtocolPolicy: redirect-to-https
          Enabled: 'true'
          HttpVersion: http2
          Origins:
            - DomainName: !GetAtt AudioBucket.DomainName
              Id: audioOrigin
              OriginPath: '/public'
              S3OriginConfig:
                OriginAccessIdentity: !Sub 'origin-access-identity/cloudfront/${CloudFrontOriginAccessIdentity}'
          PriceClass: 'PriceClass_100'
          DefaultRootObject: index.html
          Aliases:
            - ${self:custom.publicAudioUrl}
          ViewerCertificate:
            AcmCertificateArn: arn:aws:acm:us-east-1:051489715994:certificate/033aa07f-b8b8-4668-bd95-55af13b78b29
            SslSupportMethod: 'sni-only'

    DNSRecord:
      Type: AWS::Route53::RecordSetGroup
      Properties:
        HostedZoneName: equul.us.
        RecordSets:
          - Name: ${self:custom.publicAudioUrl}
            Type: A
            AliasTarget:
              # for this magic var: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/quickref-route53.html
              HostedZoneId: Z2FDTNDATAQYW2
              DNSName: !GetAtt AudioDistribution.DomainName
